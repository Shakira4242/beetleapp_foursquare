import { ConfigureStoreOptions } from './redux';
import { PubSubChannel, SwEventChannel } from './redux/interfaces';
import { RPCConnectResult, InternalSDKLogger } from './utils/interfaces';
export declare const createMockedLogger: () => InternalSDKLogger;
/**
 * Helper method to configure a Store w/o Saga middleware.
 * Useful to test slices and reducers logic.
 *
 * @returns Redux Store
 */
export declare const configureJestStore: (options?: Partial<ConfigureStoreOptions> | undefined) => {
    runSaga: <T>(saga: import("@redux-saga/types").Saga<any[]>, args: {
        instance: T;
        runSaga: any;
    }) => import("@redux-saga/types").Task;
    dispatch: import("redux").Dispatch<import("redux").AnyAction>;
    getState(): any;
    subscribe(listener: () => void): import("redux").Unsubscribe;
    replaceReducer(nextReducer: import("redux").Reducer<any, import("redux").AnyAction>): void;
    [Symbol.observable](): import("redux").Observable<any>;
};
export declare const wait: (ms: number) => Promise<unknown>;
export declare const rpcConnectResultVRT: RPCConnectResult;
export declare const createPubSubChannel: () => PubSubChannel;
export declare const createSwEventChannel: () => SwEventChannel;
//# sourceMappingURL=testUtils.d.ts.map