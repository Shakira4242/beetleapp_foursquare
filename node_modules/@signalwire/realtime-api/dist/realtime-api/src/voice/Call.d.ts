import { AssertSameType, BaseComponentOptions, EmitterContract, VoiceCallContract, VoiceCallDisconnectReason, VoicePlaylist, VoiceCallPlayAudioMethodParams, VoiceCallPlaySilenceMethodParams, VoiceCallPlayRingtoneMethodParams, VoiceCallPlayTTSMethodParams, VoiceCallRecordMethodParams, VoiceCallPromptMethodParams, VoiceCallPromptAudioMethodParams, VoiceCallPromptRingtoneMethodParams, VoiceCallPromptTTSMethodParams, EventTransform, VoiceCallTapMethodParams, VoiceCallTapAudioMethodParams, CallingCallState, VoiceCallConnectMethodParams, VoiceCallConnectPhoneMethodParams, VoiceCallConnectSipMethodParams, VoiceCallDetectMethodParams, VoiceCallDetectMachineParams, VoiceCallDetectFaxParams, VoiceCallDetectDigitParams, VoiceDialerParams } from '@signalwire/core';
import { RealTimeCallApiEvents } from '../types';
import { AutoApplyTransformsConsumer } from '../AutoApplyTransformsConsumer';
import { CallPlayback } from './CallPlayback';
import { CallRecording } from './CallRecording';
import { CallPrompt } from './CallPrompt';
import { CallTap } from './CallTap';
import { CallDetect } from './CallDetect';
import { CallDocs } from './Call.docs';
declare type EmitterTransformsEvents = 'calling.playback.start' | 'calling.playback.started' | 'calling.playback.updated' | 'calling.playback.ended' | 'calling.recording.started' | 'calling.recording.updated' | 'calling.recording.ended' | 'calling.recording.failed' | 'calling.prompt.started' | 'calling.prompt.updated' | 'calling.prompt.ended' | 'calling.prompt.failed' | 'calling.tap.started' | 'calling.tap.ended' | 'calling.detect.started' | 'calling.detect.ended' | 'calling.call.state' | 'calling.detect.updated' | 'calling.connect.connected';
interface CallMain extends VoiceCallContract<Call>, EmitterContract<RealTimeCallApiEvents> {
}
/**
 * A Call object represents an active call. You can get instances of a Call
 * object from a {@link Voice.Client}, by answering or initiating calls.
 */
export interface Call extends AssertSameType<CallMain, CallDocs> {
}
export interface CallFullState extends Call {
}
/**
 * Used to resolve the play() method and to update the CallPlayback object through the EmitterTransform
 */
export declare const callingPlaybackTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the record() method and to update the CallRecording object through the EmitterTransform
 */
export declare const callingRecordTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the prompt() method and to update the CallPrompt object through the EmitterTransform
 */
export declare const callingPromptTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the tap() method and to update the CallTap object through the EmitterTransform
 */
export declare const callingTapTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the detect() method and to update the CallDetect object through the EmitterTransform
 */
export declare const callingDetectTriggerEvent: EmitterTransformsEvents;
export declare class CallConsumer extends AutoApplyTransformsConsumer<RealTimeCallApiEvents> {
    protected _eventsPrefix: "calling";
    callId: string;
    nodeId: string;
    peer: string;
    constructor(options: BaseComponentOptions<RealTimeCallApiEvents>);
    get id(): string;
    get tag(): string;
    get type(): any;
    get from(): any;
    get to(): any;
    get headers(): any;
    /** @internal */
    protected getEmitterTransforms(): Map<EmitterTransformsEvents | EmitterTransformsEvents[], EventTransform>;
    dial(params: VoiceDialerParams): Promise<unknown>;
    hangup(reason?: VoiceCallDisconnectReason): Promise<unknown>;
    answer(): Promise<this>;
    play(params: VoicePlaylist): Promise<CallPlayback>;
    playAudio(params: VoiceCallPlayAudioMethodParams): Promise<CallPlayback>;
    playSilence(params: VoiceCallPlaySilenceMethodParams): Promise<CallPlayback>;
    playRingtone(params: VoiceCallPlayRingtoneMethodParams): Promise<CallPlayback>;
    playTTS(params: VoiceCallPlayTTSMethodParams): Promise<CallPlayback>;
    record(params: VoiceCallRecordMethodParams): Promise<CallRecording>;
    recordAudio(params?: VoiceCallRecordMethodParams['audio']): Promise<CallRecording>;
    prompt(params: VoiceCallPromptMethodParams): Promise<CallPrompt>;
    promptAudio(params: VoiceCallPromptAudioMethodParams): Promise<CallPrompt>;
    promptRingtone(params: VoiceCallPromptRingtoneMethodParams): Promise<CallPrompt>;
    promptTTS(params: VoiceCallPromptTTSMethodParams): Promise<CallPrompt>;
    sendDigits(digits: string): Promise<unknown>;
    tap(params: VoiceCallTapMethodParams): Promise<CallTap>;
    tapAudio(params: VoiceCallTapAudioMethodParams): Promise<CallTap>;
    connect(params: VoiceCallConnectMethodParams): Promise<any>;
    connectPhone({ ringback, ...params }: VoiceCallConnectPhoneMethodParams): Promise<any>;
    connectSip({ ringback, ...params }: VoiceCallConnectSipMethodParams): Promise<any>;
    disconnect(): Promise<void>;
    waitForDisconnected(): Promise<this>;
    detect(params: VoiceCallDetectMethodParams): Promise<CallDetect>;
    amd(params?: Omit<VoiceCallDetectMachineParams, 'type'>): Promise<CallDetect>;
    detectFax(params?: Omit<VoiceCallDetectFaxParams, 'type'>): Promise<CallDetect>;
    detectDigit(params?: Omit<VoiceCallDetectDigitParams, 'type'>): Promise<CallDetect>;
    waitFor(params: CallingCallState | CallingCallState[]): Promise<unknown>;
}
export declare const CallAPI: import("@signalwire/core").ConstructableType<CallConsumer>;
export declare const createCallObject: (params: BaseComponentOptions<EmitterTransformsEvents>) => Call;
export {};
//# sourceMappingURL=Call.d.ts.map