import type { SwEvent } from '.';
import type { CamelToSnakeCase, EntityUpdated, ToInternalVideoEvent, MemberCommandParams, MemberCommandWithValueParams, MemberCommandWithVolumeParams, OnlyFunctionProperties, OnlyStateProperties } from './utils';
import type { InternalVideoMemberEntity } from './videoMember';
import * as Rooms from '../rooms';
/**
 * Public event types
 */
export declare type RoomStarted = 'room.started';
export declare type RoomSubscribed = 'room.subscribed';
export declare type RoomUpdated = 'room.updated';
export declare type RoomEnded = 'room.ended';
export declare type RoomJoined = 'room.joined';
/**
 * List of public event names
 */
export declare type VideoRoomSessionEventNames = RoomStarted | RoomSubscribed | RoomJoined | RoomUpdated | RoomEnded;
/**
 * List of internal events
 * @internal
 */
export declare type InternalVideoRoomSessionEventNames = ToInternalVideoEvent<VideoRoomSessionEventNames>;
/**
 * Public Contract for a VideoRoomSession
 */
export interface VideoRoomSessionContract {
    /** Unique id for this room session */
    id: string;
    /** Display name for this room. Defaults to the value of `name` */
    displayName: string;
    /** Id of the room associated to this room session */
    roomId: string;
    /** @internal */
    eventChannel: string;
    /** Name of this room */
    name: string;
    /** Whether recording is active */
    recording: boolean;
    /** List of active recordings in the room */
    recordings?: any[];
    /** Whether muted videos are shown in the room layout. See {@link setHideVideoMuted} */
    hideVideoMuted: boolean;
    /** URL to the room preview. */
    previewUrl?: string;
    /** Current layout name used in the room. */
    layoutName: string;
    /** Metadata associated to this room session. */
    meta?: Record<string, unknown>;
    /** List of members that are part of this room session */
    members?: InternalVideoMemberEntity[];
    audioMute(params?: MemberCommandParams): Rooms.AudioMuteMember;
    audioUnmute(params?: MemberCommandParams): Rooms.AudioUnmuteMember;
    videoMute(params?: MemberCommandParams): Rooms.VideoMuteMember;
    videoUnmute(params?: MemberCommandParams): Rooms.VideoUnmuteMember;
    /** @deprecated Use {@link setInputVolume} instead. */
    setMicrophoneVolume(params: MemberCommandWithVolumeParams): Rooms.SetInputVolumeMember;
    setInputVolume(params: MemberCommandWithVolumeParams): Rooms.SetInputVolumeMember;
    setInputSensitivity(params: MemberCommandWithValueParams): Rooms.SetInputSensitivityMember;
    getMembers(): Rooms.GetMembers;
    deaf(params?: MemberCommandParams): Rooms.DeafMember;
    undeaf(params?: MemberCommandParams): Rooms.UndeafMember;
    /** @deprecated Use {@link setOutputVolume} instead. */
    setSpeakerVolume(params: MemberCommandWithVolumeParams): Rooms.SetOutputVolumeMember;
    setOutputVolume(params: MemberCommandWithVolumeParams): Rooms.SetOutputVolumeMember;
    removeMember(params: Required<MemberCommandParams>): Rooms.RemoveMember;
    removeAllMembers(): Rooms.RemoveAllMembers;
    setHideVideoMuted(value: boolean): Rooms.SetHideVideoMuted;
    getLayouts(): Rooms.GetLayouts;
    setLayout(params: Rooms.SetLayoutParams): Rooms.SetLayout;
    setPositions(params: Rooms.SetPositionsParams): Rooms.SetPositions;
    setMemberPosition(params: Rooms.SetMemberPositionParams): Rooms.SetMemberPosition;
    getRecordings(): Rooms.GetRecordings;
    startRecording(): Promise<Rooms.RoomSessionRecording>;
    getPlaybacks(): Rooms.GetPlaybacks;
    play(params: Rooms.PlayParams): Promise<Rooms.RoomSessionPlayback>;
    setMeta(params: Rooms.SetMetaParams): Rooms.SetMeta;
    setMemberMeta(params: Rooms.SetMemberMetaParams): Rooms.SetMemberMeta;
}
/**
 * VideoRoomSession properties
 */
export declare type VideoRoomSessionEntity = OnlyStateProperties<VideoRoomSessionContract>;
/**
 * VideoRoomSession methods
 */
export declare type VideoRoomSessionMethods = OnlyFunctionProperties<VideoRoomSessionContract>;
/**
 * VideoRoomSessionEntity plus `updated` field
 */
export declare type VideoRoomSessionEntityUpdated = EntityUpdated<VideoRoomSessionEntity>;
/**
 * VideoRoomSessionEntity for internal usage (converted to snake_case)
 * @internal
 */
export declare type InternalVideoRoomSessionEntity = {
    [K in NonNullable<keyof VideoRoomSessionEntity> as CamelToSnakeCase<K>]: VideoRoomSessionEntity[K];
};
/**
 * VideoRoomEntity for internal usage only: backwards compat.
 * @internal
 * @deprecated
 */
declare type InternalVideoRoomEntity = {
    room_id: string;
    room_session_id: string;
    event_channel: string;
    name: string;
    recording: boolean;
    hide_video_muted: boolean;
    preview_url?: string;
};
/**
 * VideoRoomSessionEntity plus `updated` field
 * for internal usage (converted to snake_case)
 * @internal
 */
export declare type InternalVideoRoomUpdated = EntityUpdated<InternalVideoRoomSessionEntity>;
export interface InternalVideoRoomJoinedEvent extends SwEvent {
    event_type: ToInternalVideoEvent<RoomJoined>;
    params: VideoRoomSubscribedEventParams;
}
export declare type InternalVideoRoomEvent = InternalVideoRoomJoinedEvent;
/**
 * ==========
 * ==========
 * Server-Side Events
 * ==========
 * ==========
 */
/**
 * 'video.room.started'
 */
export interface VideoRoomStartedEventParams {
    room_id: string;
    room_session_id: string;
    room: InternalVideoRoomEntity;
    room_session: InternalVideoRoomSessionEntity;
}
export interface VideoRoomStartedEvent extends SwEvent {
    event_type: ToInternalVideoEvent<RoomStarted>;
    params: VideoRoomStartedEventParams;
}
/**
 * 'video.room.subscribed'
 */
export interface VideoRoomSubscribedEventParams {
    room: InternalVideoRoomEntity & {
        members: InternalVideoMemberEntity[];
    };
    room_session: InternalVideoRoomSessionEntity & {
        members: InternalVideoMemberEntity[];
    };
    call_id: string;
    member_id: string;
}
export interface VideoRoomSubscribedEvent extends SwEvent {
    event_type: ToInternalVideoEvent<RoomSubscribed>;
    params: VideoRoomSubscribedEventParams;
}
/**
 * 'video.room.updated'
 */
export interface VideoRoomUpdatedEventParams {
    room_id: string;
    room_session_id: string;
    room: InternalVideoRoomEntity;
    room_session: InternalVideoRoomSessionEntity;
}
export interface VideoRoomUpdatedEvent extends SwEvent {
    event_type: ToInternalVideoEvent<RoomUpdated>;
    params: VideoRoomUpdatedEventParams;
}
/**
 * 'video.room.ended'
 */
export interface VideoRoomEndedEventParams {
    room_id: string;
    room_session_id: string;
    room: InternalVideoRoomEntity;
    room_session: InternalVideoRoomSessionEntity;
}
export interface VideoRoomEndedEvent extends SwEvent {
    event_type: ToInternalVideoEvent<RoomEnded>;
    params: VideoRoomEndedEventParams;
}
export declare type VideoRoomEvent = VideoRoomStartedEvent | VideoRoomSubscribedEvent | VideoRoomUpdatedEvent | VideoRoomEndedEvent;
export declare type VideoRoomEventParams = VideoRoomStartedEventParams | VideoRoomSubscribedEventParams | VideoRoomUpdatedEventParams | VideoRoomEndedEventParams;
export {};
//# sourceMappingURL=videoRoomSession.d.ts.map