import type { OnlyStateProperties, OnlyFunctionProperties, SwEvent, CamelToSnakeCase } from '..';
import type { MapToPubSubShape } from '../redux/interfaces';
import type { PubSubContract, PubSubMessageEntity } from './pubSub';
import type { PaginationCursor } from './common';
import { PRODUCT_PREFIX_CHAT } from '../utils/constants';
/** @deprecated use {@link PaginationCursor} */
export declare type ChatCursor = PaginationCursor;
declare type ToInternalChatEvent<T extends string> = `${ChatNamespace}.${T}`;
export declare type ChatNamespace = typeof PRODUCT_PREFIX_CHAT;
export declare type ChatMessageEventName = 'message';
export declare type ChatMemberJoinedEventName = 'member.joined';
export declare type ChatMemberUpdatedEventName = 'member.updated';
export declare type ChatMemberLeftEventName = 'member.left';
export declare type ChatMemberEventNames = ChatMemberJoinedEventName | ChatMemberUpdatedEventName | ChatMemberLeftEventName;
export declare type ChatEventNames = ChatMessageEventName | ChatMemberEventNames;
export declare type ChatChannel = string | string[];
interface ChatSetMemberStateParams {
    memberId: string;
    channels: ChatChannel;
    state: Record<any, any>;
}
interface ChatGetMemberStateParams {
    memberId: string;
    channels?: ChatChannel;
}
interface ChatGetMessagesParams {
    channel: string;
    cursor?: PaginationCursor;
}
interface ChatGetMembersParams {
    channel: string;
}
export interface ChatChannelState {
    state: Record<string, any> | Array<Record<string, any>>;
}
export declare type ChatChannelName = string;
export interface ChatContract extends PubSubContract {
    getMessages(params: ChatGetMessagesParams): Promise<{
        messages: ChatMessageEntity[];
        cursor: PaginationCursor;
    }>;
    getMembers(params: ChatGetMembersParams): Promise<{
        members: ChatMemberEntity[];
    }>;
    setMemberState(params: ChatSetMemberStateParams): Promise<void>;
    getMemberState(params: ChatGetMemberStateParams): Promise<{
        channels: Record<ChatChannelName, ChatChannelState>;
    }>;
}
export declare type ChatEntity = OnlyStateProperties<ChatContract>;
export declare type ChatMethods = Omit<OnlyFunctionProperties<ChatContract>, 'subscribe' | 'unsubscribe' | 'updateToken'>;
export interface ChatMessageContract extends PubSubMessageEntity {
    member: ChatMemberContract;
}
export declare type ChatMessageEntity = Omit<OnlyStateProperties<ChatMessageContract>, 'channel'>;
export declare type InternalChatMessageEntity = {
    [K in NonNullable<keyof ChatMessageEntity> as CamelToSnakeCase<K>]: ChatMessageEntity[K];
} & {
    member: InternalChatMemberEntity;
};
export interface ChatMemberContract {
    id: string;
    channel: string;
    state: Record<any, any>;
}
export declare type ChatMemberEntity = OnlyStateProperties<ChatMemberContract>;
export declare type InternalChatMemberEntity = {
    [K in NonNullable<keyof ChatMemberEntity> as CamelToSnakeCase<K>]: ChatMemberEntity[K];
};
/**
 * ==========
 * ==========
 * Server-Side Events
 * ==========
 * ==========
 */
/**
 * Internally we're mapping/converting this event to
 * `message` so the end user can register their event
 * handlers as `client.on('message', handler)` instead of
 * `client.on('channel.message', handler)`
 */
declare type ChannelMessageEventName = 'channel.message';
/**
 * 'chat.channel.message'
 */
export interface ChatChannelMessageEventParams {
    channel: string;
    message: InternalChatMessageEntity;
}
export interface ChatChannelMessageEvent extends SwEvent {
    event_type: ToInternalChatEvent<ChannelMessageEventName>;
    params: ChatChannelMessageEventParams;
}
/**
 * 'chat.member.joined'
 */
export interface ChatMemberJoinedEventParams {
    channel: string;
    member: InternalChatMemberEntity;
}
export interface ChatMemberJoinedEvent extends SwEvent {
    event_type: ToInternalChatEvent<ChatMemberJoinedEventName>;
    params: ChatMemberJoinedEventParams;
}
/**
 * 'chat.member.updated'
 */
export interface ChatMemberUpdatedEventParams {
    channel: string;
    member: InternalChatMemberEntity;
}
export interface ChatMemberUpdatedEvent extends SwEvent {
    event_type: ToInternalChatEvent<ChatMemberUpdatedEventName>;
    params: ChatMemberUpdatedEventParams;
}
/**
 * 'chat.member.left'
 */
export interface ChatMemberLeftEventParams {
    channel: string;
    member: InternalChatMemberEntity;
}
export interface ChatMemberLeftEvent extends SwEvent {
    event_type: ToInternalChatEvent<ChatMemberLeftEventName>;
    params: ChatMemberLeftEventParams;
}
export declare type ChatEvent = ChatChannelMessageEvent | ChatMemberJoinedEvent | ChatMemberUpdatedEvent | ChatMemberLeftEvent;
export declare type ChatEventParams = ChatChannelMessageEventParams | ChatMemberJoinedEventParams | ChatMemberUpdatedEventParams | ChatMemberLeftEventParams;
export declare type ChatAction = MapToPubSubShape<ChatEvent>;
export interface InternalChatChannel {
    name: string;
}
export declare type ChatJSONRPCMethod = 'chat.subscribe' | 'chat.publish' | 'chat.unsubscribe' | 'chat.member.set_state' | 'chat.member.get_state' | 'chat.members.get' | 'chat.messages.get';
export declare type ChatTransformType = 'chatMessage' | 'chatMember';
export {};
//# sourceMappingURL=chat.d.ts.map