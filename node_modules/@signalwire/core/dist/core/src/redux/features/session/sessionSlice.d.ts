import type { PayloadAction } from '../../toolkit';
import type { SessionState } from '../../interfaces';
import type { RPCConnectResult, SessionAuthStatus } from '../../../utils/interfaces';
import type { DeepReadonly } from '../../../types';
export declare const initialSessionState: DeepReadonly<SessionState>;
export declare const sessionActions: import("../../toolkit/createSlice").CaseReducerActions<{
    connected: (state: {
        readonly protocol: string;
        readonly iceServers?: readonly {
            readonly credential?: string | undefined;
            readonly credentialType?: "password" | undefined;
            readonly urls: string | readonly string[];
            readonly username?: string | undefined;
        }[] | undefined;
        readonly authStatus: SessionAuthStatus;
        readonly authState?: {
            readonly type: "video";
            readonly project: string;
            readonly scopes: readonly string[];
            readonly scope_id: string;
            readonly resource: string;
            readonly user_name: string;
            readonly room?: {
                readonly name: string;
                readonly scopes: readonly string[];
            } | undefined;
            readonly signature: string;
            readonly expires_at?: number | undefined;
            readonly audio_allowed?: boolean | undefined;
            readonly video_allowed?: boolean | undefined;
        } | undefined;
        readonly authError?: {
            readonly code: number;
            readonly message: string;
        } | undefined;
        readonly authCount: number;
    }, { payload }: PayloadAction<RPCConnectResult>) => {
        authStatus: "authorized";
        authState: import("../../../utils/interfaces").Authorization;
        authCount: number;
        protocol: string;
        iceServers: RTCIceServer[];
        authError?: {
            readonly code: number;
            readonly message: string;
        } | undefined;
    };
    authStatus: (state: {
        readonly protocol: string;
        readonly iceServers?: readonly {
            readonly credential?: string | undefined;
            readonly credentialType?: "password" | undefined;
            readonly urls: string | readonly string[];
            readonly username?: string | undefined;
        }[] | undefined;
        readonly authStatus: SessionAuthStatus;
        readonly authState?: {
            readonly type: "video";
            readonly project: string;
            readonly scopes: readonly string[];
            readonly scope_id: string;
            readonly resource: string;
            readonly user_name: string;
            readonly room?: {
                readonly name: string;
                readonly scopes: readonly string[];
            } | undefined;
            readonly signature: string;
            readonly expires_at?: number | undefined;
            readonly audio_allowed?: boolean | undefined;
            readonly video_allowed?: boolean | undefined;
        } | undefined;
        readonly authError?: {
            readonly code: number;
            readonly message: string;
        } | undefined;
        readonly authCount: number;
    }, { payload }: PayloadAction<SessionAuthStatus>) => {
        authStatus: SessionAuthStatus;
        protocol: string;
        iceServers?: readonly {
            readonly credential?: string | undefined;
            readonly credentialType?: "password" | undefined;
            readonly urls: string | readonly string[];
            readonly username?: string | undefined;
        }[] | undefined;
        authState?: {
            readonly type: "video";
            readonly project: string;
            readonly scopes: readonly string[];
            readonly scope_id: string;
            readonly resource: string;
            readonly user_name: string;
            readonly room?: {
                readonly name: string;
                readonly scopes: readonly string[];
            } | undefined;
            readonly signature: string;
            readonly expires_at?: number | undefined;
            readonly audio_allowed?: boolean | undefined;
            readonly video_allowed?: boolean | undefined;
        } | undefined;
        authError?: {
            readonly code: number;
            readonly message: string;
        } | undefined;
        authCount: number;
    };
}>, sessionReducer: import("redux").Reducer<{
    readonly protocol: string;
    readonly iceServers?: readonly {
        readonly credential?: string | undefined;
        readonly credentialType?: "password" | undefined;
        readonly urls: string | readonly string[];
        readonly username?: string | undefined;
    }[] | undefined;
    readonly authStatus: SessionAuthStatus;
    readonly authState?: {
        readonly type: "video";
        readonly project: string;
        readonly scopes: readonly string[];
        readonly scope_id: string;
        readonly resource: string;
        readonly user_name: string;
        readonly room?: {
            readonly name: string;
            readonly scopes: readonly string[];
        } | undefined;
        readonly signature: string;
        readonly expires_at?: number | undefined;
        readonly audio_allowed?: boolean | undefined;
        readonly video_allowed?: boolean | undefined;
    } | undefined;
    readonly authError?: {
        readonly code: number;
        readonly message: string;
    } | undefined;
    readonly authCount: number;
}, import("redux").AnyAction>;
//# sourceMappingURL=sessionSlice.d.ts.map