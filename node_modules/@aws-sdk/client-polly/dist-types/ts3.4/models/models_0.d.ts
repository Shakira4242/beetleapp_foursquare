
import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { Readable } from "stream";
import { PollyServiceException as __BaseException } from "./PollyServiceException";
export interface DeleteLexiconInput {
    
    Name: string | undefined;
}
export declare namespace DeleteLexiconInput {
    
    const filterSensitiveLog: (obj: DeleteLexiconInput) => any;
}
export interface DeleteLexiconOutput {
}
export declare namespace DeleteLexiconOutput {
    
    const filterSensitiveLog: (obj: DeleteLexiconOutput) => any;
}

export declare class LexiconNotFoundException extends __BaseException {
    readonly name: "LexiconNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LexiconNotFoundException, __BaseException>);
}

export declare class ServiceFailureException extends __BaseException {
    readonly name: "ServiceFailureException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<ServiceFailureException, __BaseException>);
}
export declare enum Engine {
    NEURAL = "neural",
    STANDARD = "standard"
}
export declare type LanguageCode = "arb" | "ca-ES" | "cmn-CN" | "cy-GB" | "da-DK" | "de-AT" | "de-DE" | "en-AU" | "en-GB" | "en-GB-WLS" | "en-IN" | "en-NZ" | "en-US" | "en-ZA" | "es-ES" | "es-MX" | "es-US" | "fr-CA" | "fr-FR" | "hi-IN" | "is-IS" | "it-IT" | "ja-JP" | "ko-KR" | "nb-NO" | "nl-NL" | "pl-PL" | "pt-BR" | "pt-PT" | "ro-RO" | "ru-RU" | "sv-SE" | "tr-TR";
export interface DescribeVoicesInput {
    
    Engine?: Engine | string;
    
    LanguageCode?: LanguageCode | string;
    
    IncludeAdditionalLanguageCodes?: boolean;
    
    NextToken?: string;
}
export declare namespace DescribeVoicesInput {
    
    const filterSensitiveLog: (obj: DescribeVoicesInput) => any;
}
export declare type Gender = "Female" | "Male";
export declare type VoiceId = "Aditi" | "Amy" | "Aria" | "Arlet" | "Arthur" | "Astrid" | "Ayanda" | "Bianca" | "Brian" | "Camila" | "Carla" | "Carmen" | "Celine" | "Chantal" | "Conchita" | "Cristiano" | "Daniel" | "Dora" | "Emma" | "Enrique" | "Ewa" | "Filiz" | "Gabrielle" | "Geraint" | "Giorgio" | "Gwyneth" | "Hannah" | "Hans" | "Ines" | "Ivy" | "Jacek" | "Jan" | "Joanna" | "Joey" | "Justin" | "Karl" | "Kendra" | "Kevin" | "Kimberly" | "Lea" | "Liam" | "Liv" | "Lotte" | "Lucia" | "Lupe" | "Mads" | "Maja" | "Marlene" | "Mathieu" | "Matthew" | "Maxim" | "Mia" | "Miguel" | "Mizuki" | "Naja" | "Nicole" | "Olivia" | "Pedro" | "Penelope" | "Raveena" | "Ricardo" | "Ruben" | "Russell" | "Salli" | "Seoyeon" | "Takumi" | "Tatyana" | "Vicki" | "Vitoria" | "Zeina" | "Zhiyu";

export interface Voice {
    
    Gender?: Gender | string;
    
    Id?: VoiceId | string;
    
    LanguageCode?: LanguageCode | string;
    
    LanguageName?: string;
    
    Name?: string;
    
    AdditionalLanguageCodes?: (LanguageCode | string)[];
    
    SupportedEngines?: (Engine | string)[];
}
export declare namespace Voice {
    
    const filterSensitiveLog: (obj: Voice) => any;
}
export interface DescribeVoicesOutput {
    
    Voices?: Voice[];
    
    NextToken?: string;
}
export declare namespace DescribeVoicesOutput {
    
    const filterSensitiveLog: (obj: DescribeVoicesOutput) => any;
}

export declare class InvalidNextTokenException extends __BaseException {
    readonly name: "InvalidNextTokenException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
}

export declare class EngineNotSupportedException extends __BaseException {
    readonly name: "EngineNotSupportedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<EngineNotSupportedException, __BaseException>);
}
export interface GetLexiconInput {
    
    Name: string | undefined;
}
export declare namespace GetLexiconInput {
    
    const filterSensitiveLog: (obj: GetLexiconInput) => any;
}

export interface Lexicon {
    
    Content?: string;
    
    Name?: string;
}
export declare namespace Lexicon {
    
    const filterSensitiveLog: (obj: Lexicon) => any;
}

export interface LexiconAttributes {
    
    Alphabet?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModified?: Date;
    
    LexiconArn?: string;
    
    LexemesCount?: number;
    
    Size?: number;
}
export declare namespace LexiconAttributes {
    
    const filterSensitiveLog: (obj: LexiconAttributes) => any;
}
export interface GetLexiconOutput {
    
    Lexicon?: Lexicon;
    
    LexiconAttributes?: LexiconAttributes;
}
export declare namespace GetLexiconOutput {
    
    const filterSensitiveLog: (obj: GetLexiconOutput) => any;
}
export interface GetSpeechSynthesisTaskInput {
    
    TaskId: string | undefined;
}
export declare namespace GetSpeechSynthesisTaskInput {
    
    const filterSensitiveLog: (obj: GetSpeechSynthesisTaskInput) => any;
}
export declare enum OutputFormat {
    JSON = "json",
    MP3 = "mp3",
    OGG_VORBIS = "ogg_vorbis",
    PCM = "pcm"
}
export declare enum SpeechMarkType {
    SENTENCE = "sentence",
    SSML = "ssml",
    VISEME = "viseme",
    WORD = "word"
}
export declare enum TaskStatus {
    COMPLETED = "completed",
    FAILED = "failed",
    IN_PROGRESS = "inProgress",
    SCHEDULED = "scheduled"
}
export declare enum TextType {
    SSML = "ssml",
    TEXT = "text"
}

export interface SynthesisTask {
    
    Engine?: Engine | string;
    
    TaskId?: string;
    
    TaskStatus?: TaskStatus | string;
    
    TaskStatusReason?: string;
    
    OutputUri?: string;
    
    CreationTime?: Date;
    
    RequestCharacters?: number;
    
    SnsTopicArn?: string;
    
    LexiconNames?: string[];
    
    OutputFormat?: OutputFormat | string;
    
    SampleRate?: string;
    
    SpeechMarkTypes?: (SpeechMarkType | string)[];
    
    TextType?: TextType | string;
    
    VoiceId?: VoiceId | string;
    
    LanguageCode?: LanguageCode | string;
}
export declare namespace SynthesisTask {
    
    const filterSensitiveLog: (obj: SynthesisTask) => any;
}
export interface GetSpeechSynthesisTaskOutput {
    
    SynthesisTask?: SynthesisTask;
}
export declare namespace GetSpeechSynthesisTaskOutput {
    
    const filterSensitiveLog: (obj: GetSpeechSynthesisTaskOutput) => any;
}

export declare class InvalidTaskIdException extends __BaseException {
    readonly name: "InvalidTaskIdException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidTaskIdException, __BaseException>);
}

export declare class SynthesisTaskNotFoundException extends __BaseException {
    readonly name: "SynthesisTaskNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SynthesisTaskNotFoundException, __BaseException>);
}

export declare class InvalidLexiconException extends __BaseException {
    readonly name: "InvalidLexiconException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidLexiconException, __BaseException>);
}

export declare class InvalidS3BucketException extends __BaseException {
    readonly name: "InvalidS3BucketException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidS3BucketException, __BaseException>);
}

export declare class InvalidS3KeyException extends __BaseException {
    readonly name: "InvalidS3KeyException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidS3KeyException, __BaseException>);
}

export declare class InvalidSampleRateException extends __BaseException {
    readonly name: "InvalidSampleRateException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSampleRateException, __BaseException>);
}

export declare class InvalidSnsTopicArnException extends __BaseException {
    readonly name: "InvalidSnsTopicArnException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSnsTopicArnException, __BaseException>);
}

export declare class InvalidSsmlException extends __BaseException {
    readonly name: "InvalidSsmlException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSsmlException, __BaseException>);
}

export declare class LanguageNotSupportedException extends __BaseException {
    readonly name: "LanguageNotSupportedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LanguageNotSupportedException, __BaseException>);
}

export interface LexiconDescription {
    
    Name?: string;
    
    Attributes?: LexiconAttributes;
}
export declare namespace LexiconDescription {
    
    const filterSensitiveLog: (obj: LexiconDescription) => any;
}

export declare class LexiconSizeExceededException extends __BaseException {
    readonly name: "LexiconSizeExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LexiconSizeExceededException, __BaseException>);
}
export interface ListLexiconsInput {
    
    NextToken?: string;
}
export declare namespace ListLexiconsInput {
    
    const filterSensitiveLog: (obj: ListLexiconsInput) => any;
}
export interface ListLexiconsOutput {
    
    Lexicons?: LexiconDescription[];
    
    NextToken?: string;
}
export declare namespace ListLexiconsOutput {
    
    const filterSensitiveLog: (obj: ListLexiconsOutput) => any;
}
export interface ListSpeechSynthesisTasksInput {
    
    MaxResults?: number;
    
    NextToken?: string;
    
    Status?: TaskStatus | string;
}
export declare namespace ListSpeechSynthesisTasksInput {
    
    const filterSensitiveLog: (obj: ListSpeechSynthesisTasksInput) => any;
}
export interface ListSpeechSynthesisTasksOutput {
    
    NextToken?: string;
    
    SynthesisTasks?: SynthesisTask[];
}
export declare namespace ListSpeechSynthesisTasksOutput {
    
    const filterSensitiveLog: (obj: ListSpeechSynthesisTasksOutput) => any;
}

export declare class MarksNotSupportedForFormatException extends __BaseException {
    readonly name: "MarksNotSupportedForFormatException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MarksNotSupportedForFormatException, __BaseException>);
}

export declare class MaxLexemeLengthExceededException extends __BaseException {
    readonly name: "MaxLexemeLengthExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MaxLexemeLengthExceededException, __BaseException>);
}

export declare class MaxLexiconsNumberExceededException extends __BaseException {
    readonly name: "MaxLexiconsNumberExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MaxLexiconsNumberExceededException, __BaseException>);
}
export interface PutLexiconInput {
    
    Name: string | undefined;
    
    Content: string | undefined;
}
export declare namespace PutLexiconInput {
    
    const filterSensitiveLog: (obj: PutLexiconInput) => any;
}
export interface PutLexiconOutput {
}
export declare namespace PutLexiconOutput {
    
    const filterSensitiveLog: (obj: PutLexiconOutput) => any;
}

export declare class UnsupportedPlsAlphabetException extends __BaseException {
    readonly name: "UnsupportedPlsAlphabetException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedPlsAlphabetException, __BaseException>);
}

export declare class UnsupportedPlsLanguageException extends __BaseException {
    readonly name: "UnsupportedPlsLanguageException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedPlsLanguageException, __BaseException>);
}

export declare class SsmlMarksNotSupportedForTextTypeException extends __BaseException {
    readonly name: "SsmlMarksNotSupportedForTextTypeException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<SsmlMarksNotSupportedForTextTypeException, __BaseException>);
}
export interface StartSpeechSynthesisTaskInput {
    
    Engine?: Engine | string;
    
    LanguageCode?: LanguageCode | string;
    
    LexiconNames?: string[];
    
    OutputFormat: OutputFormat | string | undefined;
    
    OutputS3BucketName: string | undefined;
    
    OutputS3KeyPrefix?: string;
    
    SampleRate?: string;
    
    SnsTopicArn?: string;
    
    SpeechMarkTypes?: (SpeechMarkType | string)[];
    
    Text: string | undefined;
    
    TextType?: TextType | string;
    
    VoiceId: VoiceId | string | undefined;
}
export declare namespace StartSpeechSynthesisTaskInput {
    
    const filterSensitiveLog: (obj: StartSpeechSynthesisTaskInput) => any;
}
export interface StartSpeechSynthesisTaskOutput {
    
    SynthesisTask?: SynthesisTask;
}
export declare namespace StartSpeechSynthesisTaskOutput {
    
    const filterSensitiveLog: (obj: StartSpeechSynthesisTaskOutput) => any;
}

export declare class TextLengthExceededException extends __BaseException {
    readonly name: "TextLengthExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TextLengthExceededException, __BaseException>);
}
export interface SynthesizeSpeechInput {
    
    Engine?: Engine | string;
    
    LanguageCode?: LanguageCode | string;
    
    LexiconNames?: string[];
    
    OutputFormat: OutputFormat | string | undefined;
    
    SampleRate?: string;
    
    SpeechMarkTypes?: (SpeechMarkType | string)[];
    
    Text: string | undefined;
    
    TextType?: TextType | string;
    
    VoiceId: VoiceId | string | undefined;
}
export declare namespace SynthesizeSpeechInput {
    
    const filterSensitiveLog: (obj: SynthesizeSpeechInput) => any;
}
export interface SynthesizeSpeechOutput {
    
    AudioStream?: Readable | ReadableStream | Blob;
    
    ContentType?: string;
    
    RequestCharacters?: number;
}
export declare namespace SynthesizeSpeechOutput {
    
    const filterSensitiveLog: (obj: SynthesizeSpeechOutput) => any;
}
