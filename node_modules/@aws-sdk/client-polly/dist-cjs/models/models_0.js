"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthesizeSpeechOutput = exports.SynthesizeSpeechInput = exports.TextLengthExceededException = exports.StartSpeechSynthesisTaskOutput = exports.StartSpeechSynthesisTaskInput = exports.SsmlMarksNotSupportedForTextTypeException = exports.UnsupportedPlsLanguageException = exports.UnsupportedPlsAlphabetException = exports.PutLexiconOutput = exports.PutLexiconInput = exports.MaxLexiconsNumberExceededException = exports.MaxLexemeLengthExceededException = exports.MarksNotSupportedForFormatException = exports.ListSpeechSynthesisTasksOutput = exports.ListSpeechSynthesisTasksInput = exports.ListLexiconsOutput = exports.ListLexiconsInput = exports.LexiconSizeExceededException = exports.LexiconDescription = exports.LanguageNotSupportedException = exports.InvalidSsmlException = exports.InvalidSnsTopicArnException = exports.InvalidSampleRateException = exports.InvalidS3KeyException = exports.InvalidS3BucketException = exports.InvalidLexiconException = exports.SynthesisTaskNotFoundException = exports.InvalidTaskIdException = exports.GetSpeechSynthesisTaskOutput = exports.SynthesisTask = exports.TextType = exports.TaskStatus = exports.SpeechMarkType = exports.OutputFormat = exports.GetSpeechSynthesisTaskInput = exports.GetLexiconOutput = exports.LexiconAttributes = exports.Lexicon = exports.GetLexiconInput = exports.EngineNotSupportedException = exports.InvalidNextTokenException = exports.DescribeVoicesOutput = exports.Voice = exports.DescribeVoicesInput = exports.Engine = exports.ServiceFailureException = exports.LexiconNotFoundException = exports.DeleteLexiconOutput = exports.DeleteLexiconInput = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const PollyServiceException_1 = require("./PollyServiceException");
var DeleteLexiconInput;
(function (DeleteLexiconInput) {
    DeleteLexiconInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DeleteLexiconInput = exports.DeleteLexiconInput || (exports.DeleteLexiconInput = {}));
var DeleteLexiconOutput;
(function (DeleteLexiconOutput) {
    DeleteLexiconOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DeleteLexiconOutput = exports.DeleteLexiconOutput || (exports.DeleteLexiconOutput = {}));
class LexiconNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconNotFoundException.prototype);
    }
}
exports.LexiconNotFoundException = LexiconNotFoundException;
class ServiceFailureException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "ServiceFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceFailureException.prototype);
    }
}
exports.ServiceFailureException = ServiceFailureException;
var Engine;
(function (Engine) {
    Engine["NEURAL"] = "neural";
    Engine["STANDARD"] = "standard";
})(Engine = exports.Engine || (exports.Engine = {}));
var DescribeVoicesInput;
(function (DescribeVoicesInput) {
    DescribeVoicesInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DescribeVoicesInput = exports.DescribeVoicesInput || (exports.DescribeVoicesInput = {}));
var Voice;
(function (Voice) {
    Voice.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Voice = exports.Voice || (exports.Voice = {}));
var DescribeVoicesOutput;
(function (DescribeVoicesOutput) {
    DescribeVoicesOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DescribeVoicesOutput = exports.DescribeVoicesOutput || (exports.DescribeVoicesOutput = {}));
class InvalidNextTokenException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
class EngineNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "EngineNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "EngineNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EngineNotSupportedException.prototype);
    }
}
exports.EngineNotSupportedException = EngineNotSupportedException;
var GetLexiconInput;
(function (GetLexiconInput) {
    GetLexiconInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(GetLexiconInput = exports.GetLexiconInput || (exports.GetLexiconInput = {}));
var Lexicon;
(function (Lexicon) {
    Lexicon.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
    });
})(Lexicon = exports.Lexicon || (exports.Lexicon = {}));
var LexiconAttributes;
(function (LexiconAttributes) {
    LexiconAttributes.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(LexiconAttributes = exports.LexiconAttributes || (exports.LexiconAttributes = {}));
var GetLexiconOutput;
(function (GetLexiconOutput) {
    GetLexiconOutput.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.Lexicon && { Lexicon: Lexicon.filterSensitiveLog(obj.Lexicon) }),
    });
})(GetLexiconOutput = exports.GetLexiconOutput || (exports.GetLexiconOutput = {}));
var GetSpeechSynthesisTaskInput;
(function (GetSpeechSynthesisTaskInput) {
    GetSpeechSynthesisTaskInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(GetSpeechSynthesisTaskInput = exports.GetSpeechSynthesisTaskInput || (exports.GetSpeechSynthesisTaskInput = {}));
var OutputFormat;
(function (OutputFormat) {
    OutputFormat["JSON"] = "json";
    OutputFormat["MP3"] = "mp3";
    OutputFormat["OGG_VORBIS"] = "ogg_vorbis";
    OutputFormat["PCM"] = "pcm";
})(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));
var SpeechMarkType;
(function (SpeechMarkType) {
    SpeechMarkType["SENTENCE"] = "sentence";
    SpeechMarkType["SSML"] = "ssml";
    SpeechMarkType["VISEME"] = "viseme";
    SpeechMarkType["WORD"] = "word";
})(SpeechMarkType = exports.SpeechMarkType || (exports.SpeechMarkType = {}));
var TaskStatus;
(function (TaskStatus) {
    TaskStatus["COMPLETED"] = "completed";
    TaskStatus["FAILED"] = "failed";
    TaskStatus["IN_PROGRESS"] = "inProgress";
    TaskStatus["SCHEDULED"] = "scheduled";
})(TaskStatus = exports.TaskStatus || (exports.TaskStatus = {}));
var TextType;
(function (TextType) {
    TextType["SSML"] = "ssml";
    TextType["TEXT"] = "text";
})(TextType = exports.TextType || (exports.TextType = {}));
var SynthesisTask;
(function (SynthesisTask) {
    SynthesisTask.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(SynthesisTask = exports.SynthesisTask || (exports.SynthesisTask = {}));
var GetSpeechSynthesisTaskOutput;
(function (GetSpeechSynthesisTaskOutput) {
    GetSpeechSynthesisTaskOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(GetSpeechSynthesisTaskOutput = exports.GetSpeechSynthesisTaskOutput || (exports.GetSpeechSynthesisTaskOutput = {}));
class InvalidTaskIdException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidTaskIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTaskIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTaskIdException.prototype);
    }
}
exports.InvalidTaskIdException = InvalidTaskIdException;
class SynthesisTaskNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SynthesisTaskNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SynthesisTaskNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SynthesisTaskNotFoundException.prototype);
    }
}
exports.SynthesisTaskNotFoundException = SynthesisTaskNotFoundException;
class InvalidLexiconException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidLexiconException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLexiconException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLexiconException.prototype);
    }
}
exports.InvalidLexiconException = InvalidLexiconException;
class InvalidS3BucketException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3BucketException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3BucketException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketException.prototype);
    }
}
exports.InvalidS3BucketException = InvalidS3BucketException;
class InvalidS3KeyException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3KeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3KeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3KeyException.prototype);
    }
}
exports.InvalidS3KeyException = InvalidS3KeyException;
class InvalidSampleRateException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSampleRateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSampleRateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSampleRateException.prototype);
    }
}
exports.InvalidSampleRateException = InvalidSampleRateException;
class InvalidSnsTopicArnException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSnsTopicArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSnsTopicArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSnsTopicArnException.prototype);
    }
}
exports.InvalidSnsTopicArnException = InvalidSnsTopicArnException;
class InvalidSsmlException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSsmlException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSsmlException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSsmlException.prototype);
    }
}
exports.InvalidSsmlException = InvalidSsmlException;
class LanguageNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LanguageNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "LanguageNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LanguageNotSupportedException.prototype);
    }
}
exports.LanguageNotSupportedException = LanguageNotSupportedException;
var LexiconDescription;
(function (LexiconDescription) {
    LexiconDescription.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(LexiconDescription = exports.LexiconDescription || (exports.LexiconDescription = {}));
class LexiconSizeExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconSizeExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconSizeExceededException.prototype);
    }
}
exports.LexiconSizeExceededException = LexiconSizeExceededException;
var ListLexiconsInput;
(function (ListLexiconsInput) {
    ListLexiconsInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ListLexiconsInput = exports.ListLexiconsInput || (exports.ListLexiconsInput = {}));
var ListLexiconsOutput;
(function (ListLexiconsOutput) {
    ListLexiconsOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ListLexiconsOutput = exports.ListLexiconsOutput || (exports.ListLexiconsOutput = {}));
var ListSpeechSynthesisTasksInput;
(function (ListSpeechSynthesisTasksInput) {
    ListSpeechSynthesisTasksInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ListSpeechSynthesisTasksInput = exports.ListSpeechSynthesisTasksInput || (exports.ListSpeechSynthesisTasksInput = {}));
var ListSpeechSynthesisTasksOutput;
(function (ListSpeechSynthesisTasksOutput) {
    ListSpeechSynthesisTasksOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ListSpeechSynthesisTasksOutput = exports.ListSpeechSynthesisTasksOutput || (exports.ListSpeechSynthesisTasksOutput = {}));
class MarksNotSupportedForFormatException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MarksNotSupportedForFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "MarksNotSupportedForFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MarksNotSupportedForFormatException.prototype);
    }
}
exports.MarksNotSupportedForFormatException = MarksNotSupportedForFormatException;
class MaxLexemeLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexemeLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexemeLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexemeLengthExceededException.prototype);
    }
}
exports.MaxLexemeLengthExceededException = MaxLexemeLengthExceededException;
class MaxLexiconsNumberExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexiconsNumberExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexiconsNumberExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexiconsNumberExceededException.prototype);
    }
}
exports.MaxLexiconsNumberExceededException = MaxLexiconsNumberExceededException;
var PutLexiconInput;
(function (PutLexiconInput) {
    PutLexiconInput.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
    });
})(PutLexiconInput = exports.PutLexiconInput || (exports.PutLexiconInput = {}));
var PutLexiconOutput;
(function (PutLexiconOutput) {
    PutLexiconOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(PutLexiconOutput = exports.PutLexiconOutput || (exports.PutLexiconOutput = {}));
class UnsupportedPlsAlphabetException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsAlphabetException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsAlphabetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsAlphabetException.prototype);
    }
}
exports.UnsupportedPlsAlphabetException = UnsupportedPlsAlphabetException;
class UnsupportedPlsLanguageException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsLanguageException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsLanguageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsLanguageException.prototype);
    }
}
exports.UnsupportedPlsLanguageException = UnsupportedPlsLanguageException;
class SsmlMarksNotSupportedForTextTypeException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SsmlMarksNotSupportedForTextTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "SsmlMarksNotSupportedForTextTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SsmlMarksNotSupportedForTextTypeException.prototype);
    }
}
exports.SsmlMarksNotSupportedForTextTypeException = SsmlMarksNotSupportedForTextTypeException;
var StartSpeechSynthesisTaskInput;
(function (StartSpeechSynthesisTaskInput) {
    StartSpeechSynthesisTaskInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(StartSpeechSynthesisTaskInput = exports.StartSpeechSynthesisTaskInput || (exports.StartSpeechSynthesisTaskInput = {}));
var StartSpeechSynthesisTaskOutput;
(function (StartSpeechSynthesisTaskOutput) {
    StartSpeechSynthesisTaskOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(StartSpeechSynthesisTaskOutput = exports.StartSpeechSynthesisTaskOutput || (exports.StartSpeechSynthesisTaskOutput = {}));
class TextLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "TextLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextLengthExceededException.prototype);
    }
}
exports.TextLengthExceededException = TextLengthExceededException;
var SynthesizeSpeechInput;
(function (SynthesizeSpeechInput) {
    SynthesizeSpeechInput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(SynthesizeSpeechInput = exports.SynthesizeSpeechInput || (exports.SynthesizeSpeechInput = {}));
var SynthesizeSpeechOutput;
(function (SynthesizeSpeechOutput) {
    SynthesizeSpeechOutput.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(SynthesizeSpeechOutput = exports.SynthesizeSpeechOutput || (exports.SynthesizeSpeechOutput = {}));
